- name: Add Firewall Rules
  firewalld:
    state: enabled
    zone: public
    port: "{{ item }}"
    permanent: yes
    immediate: yes
  with_items: "{{ master_port_ranges }}"

- name: Exisitng Master Check
  stat:
    path: /etc/kubernetes/kubelet.conf
  register: statResult

- name: Cluster Initialisation
  block:
    - name: Setup Cluster
      command: kubeadm init
    - name: Create ~/.kube
      file:
        path: /root/.kube
        state: directory
    - name: Setup Host kubectl
      copy:
        remote_src: true
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        force: true
    - name: Taint Master Node
      command: kubectl taint nodes --all node-role.kubernetes.io/master-
  when: statResult.stat.exists == false

- name: Apply Weave Net
  shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

- name: Apply Dashboard Deployment
  command: kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml

- name: Ensures /etc/kubernetes/resources Directory Exists
  file:
    path: /etc/kubernetes/resources
    state: directory

- name: Copy Kubernetes Admin Account YAML
  copy:
    src: kubernetes-admin-account.yaml
    dest: /etc/kubernetes/resources/kubernetes-admin-account.yaml

- name: Apply Kubernetes Admin Account
  command: kubectl apply -f /etc/kubernetes/resources/kubernetes-admin-account.yaml

- name: Get Kubernetes Admin Account Token
  shell: kubectl -n kube-system describe secret kubernetes-admin-account | awk '$1=="token:"{print $2}'
  register: adminToken

- name: Add Kubernetes Admin Account Token to Config
  command: kubectl config set-credentials kubernetes-admin --token="{{ adminToken.stdout }}"

- name: Fetch Kubernetes Config
  fetch:
    src: /root/.kube/config
    dest: output/kubernetes/config
    flat: yes

- name: Create Temporary Node Joining Token
  command: kubeadm token create
  register: nodeJoinToken

- name: Set Joining Token Fact
  set_fact:
    nodeJoinToken: "{{ nodeJoinToken.stdout }}"

- name: Get CA Cert Hash
  shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
  register: caCertHash

- name: Set CA Cert Hash Fact
  set_fact:
    caCertHash: "{{ caCertHash.stdout }}"